   1               		.file	"clksys_driver.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__CCP__ = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  10               	.global	CCPWrite
  12               	CCPWrite:
  13               	.LFB7:
  14               		.file 1 "clksys_driver.c"
   1:clksys_driver.c **** /* This file has been prepared for Doxygen automatic documentation generation.*/
   2:clksys_driver.c **** /*! \file *********************************************************************
   3:clksys_driver.c ****  *
   4:clksys_driver.c ****  * \brief  XMEGA Clock System driver source file.
   5:clksys_driver.c ****  *
   6:clksys_driver.c ****  *      This file contains the function implementations for the XMEGA Clock
   7:clksys_driver.c ****  *      System driver.
   8:clksys_driver.c ****  *
   9:clksys_driver.c ****  *      The driver is not intended for size and/or speed critical code, since
  10:clksys_driver.c ****  *      most functions are just a few lines of code, and the function call
  11:clksys_driver.c ****  *      overhead would decrease code performance. The driver is intended for
  12:clksys_driver.c ****  *      rapid prototyping and documentation purposes for getting started with
  13:clksys_driver.c ****  *      the XMEGA Clock System.
  14:clksys_driver.c ****  *
  15:clksys_driver.c ****  *      For size and/or speed critical code, it is recommended to copy the
  16:clksys_driver.c ****  *      function contents directly into your application instead of making
  17:clksys_driver.c ****  *      a function call.
  18:clksys_driver.c ****  *
  19:clksys_driver.c ****  *      Several functions use the following construct:
  20:clksys_driver.c ****  *          "some_register = ... | (some_parameter ? SOME_BIT_bm : 0) | ..."
  21:clksys_driver.c ****  *      Although the use of the ternary operator ( if ? then : else ) is
  22:clksys_driver.c ****  *      discouraged, in some occasions the operator makes it possible to
  23:clksys_driver.c ****  *      write pretty clean and neat code. In this driver, the construct is
  24:clksys_driver.c ****  *      used to set or not set a configuration bit based on a boolean input
  25:clksys_driver.c ****  *      parameter, such as the "some_parameter" in the example above.
  26:clksys_driver.c ****  *
  27:clksys_driver.c ****  * \par Application note:
  28:clksys_driver.c ****  *      AVR1003: Using the XMEGA Clock System
  29:clksys_driver.c ****  *
  30:clksys_driver.c ****  * \par Documentation
  31:clksys_driver.c ****  *      For comprehensive code documentation, supported compilers, compiler
  32:clksys_driver.c ****  *      settings and supported devices see readme.html
  33:clksys_driver.c ****  *
  34:clksys_driver.c ****  * \author
  35:clksys_driver.c ****  *      Atmel Corporation: http://www.atmel.com \n
  36:clksys_driver.c ****  *      Support email: avr@atmel.com
  37:clksys_driver.c ****  *
  38:clksys_driver.c ****  * $Revision: 2771 $
  39:clksys_driver.c ****  * $Date: 2009-09-11 11:54:26 +0200 (fr, 11 sep 2009) $  \n
  40:clksys_driver.c ****  *
  41:clksys_driver.c ****  * Copyright (c) 2008, Atmel Corporation All rights reserved.
  42:clksys_driver.c ****  *
  43:clksys_driver.c ****  * Redistribution and use in source and binary forms, with or without
  44:clksys_driver.c ****  * modification, are permitted provided that the following conditions are met:
  45:clksys_driver.c ****  *
  46:clksys_driver.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  47:clksys_driver.c ****  * this list of conditions and the following disclaimer.
  48:clksys_driver.c ****  *
  49:clksys_driver.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  50:clksys_driver.c ****  * this list of conditions and the following disclaimer in the documentation
  51:clksys_driver.c ****  * and/or other materials provided with the distribution.
  52:clksys_driver.c ****  *
  53:clksys_driver.c ****  * 3. The name of ATMEL may not be used to endorse or promote products derived
  54:clksys_driver.c ****  * from this software without specific prior written permission.
  55:clksys_driver.c ****  *
  56:clksys_driver.c ****  * THIS SOFTWARE IS PROVIDED BY ATMEL "AS IS" AND ANY EXPRESS OR IMPLIED
  57:clksys_driver.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  58:clksys_driver.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE EXPRESSLY AND
  59:clksys_driver.c ****  * SPECIFICALLY DISCLAIMED. IN NO EVENT SHALL ATMEL BE LIABLE FOR ANY DIRECT,
  60:clksys_driver.c ****  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  61:clksys_driver.c ****  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  62:clksys_driver.c ****  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  63:clksys_driver.c ****  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  64:clksys_driver.c ****  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  65:clksys_driver.c ****  * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  66:clksys_driver.c ****  *****************************************************************************/
  67:clksys_driver.c **** #include "clksys_driver.h"
  68:clksys_driver.c **** 
  69:clksys_driver.c **** /*! \brief CCP write helper function written in assembly.
  70:clksys_driver.c ****  *
  71:clksys_driver.c ****  *  This function is written in assembly because of the timecritial
  72:clksys_driver.c ****  *  operation of writing to the registers.
  73:clksys_driver.c ****  *
  74:clksys_driver.c ****  *  \param address A pointer to the address to write to.
  75:clksys_driver.c ****  *  \param value   The value to put in to the register.
  76:clksys_driver.c ****  */
  77:clksys_driver.c **** void CCPWrite( volatile uint8_t * address, uint8_t value )
  78:clksys_driver.c **** {
  15               		.loc 1 78 0
  16               	.LVL0:
  17 0000 0F93      		push r16
  18               	.LCFI0:
  19 0002 CF93      		push r28
  20               	.LCFI1:
  21 0004 DF93      		push r29
  22               	.LCFI2:
  23 0006 1F92      		push __zero_reg__
  24               	.LCFI3:
  25 0008 CDB7      		in r28,__SP_L__
  26 000a DEB7      		in r29,__SP_H__
  27               	.LCFI4:
  28               	/* prologue: function */
  29               	/* frame size = 1 */
  30               	/* stack size = 4 */
  31               	.L__stack_usage = 4
  79:clksys_driver.c **** #ifdef __ICCAVR__
  80:clksys_driver.c **** 
  81:clksys_driver.c **** 	// Store global interrupt setting in scratch register and disable interrupts.
  82:clksys_driver.c ****         asm("in  R1, 0x3F \n"
  83:clksys_driver.c **** 	    "cli"
  84:clksys_driver.c **** 	    );
  85:clksys_driver.c **** 
  86:clksys_driver.c **** 	// Move destination address pointer to Z pointer registers.
  87:clksys_driver.c **** 	asm("movw r30, r16");
  88:clksys_driver.c **** #ifdef RAMPZ
  89:clksys_driver.c **** 	asm("ldi  R16, 0 \n"
  90:clksys_driver.c ****             "out  0x3B, R16"
  91:clksys_driver.c **** 	    );
  92:clksys_driver.c **** 
  93:clksys_driver.c **** #endif
  94:clksys_driver.c **** 	asm("ldi  r16,  0xD8 \n"
  95:clksys_driver.c **** 	    "out  0x34, r16  \n"
  96:clksys_driver.c **** #if (__MEMORY_MODEL__ == 1)
  97:clksys_driver.c **** 	    "st     Z,  r17  \n");
  98:clksys_driver.c **** #elif (__MEMORY_MODEL__ == 2)
  99:clksys_driver.c **** 	    "st     Z,  r18  \n");
 100:clksys_driver.c **** #else /* (__MEMORY_MODEL__ == 3) || (__MEMORY_MODEL__ == 5) */
 101:clksys_driver.c **** 	    "st     Z,  r19  \n");
 102:clksys_driver.c **** #endif /* __MEMORY_MODEL__ */
 103:clksys_driver.c **** 
 104:clksys_driver.c **** 	// Restore global interrupt setting from scratch register.
 105:clksys_driver.c ****         asm("out  0x3F, R1");
 106:clksys_driver.c **** 
 107:clksys_driver.c **** #elif defined __GNUC__
 108:clksys_driver.c **** 	AVR_ENTER_CRITICAL_REGION( );
  32               		.loc 1 108 0
  33 000c 2FB7      		in r18,__SREG__
  34               	.LVL1:
  35 000e 2983      		std Y+1,r18
  36               	/* #APP */
  37               	 ;  108 "clksys_driver.c" 1
  38 0010 F894      		cli
  39               	 ;  0 "" 2
  40               	.LVL2:
 109:clksys_driver.c **** 	volatile uint8_t * tmpAddr = address;
 110:clksys_driver.c **** #ifdef RAMPZ
 111:clksys_driver.c **** 	RAMPZ = 0;
  41               		.loc 1 111 0
  42               	/* #NOAPP */
  43 0012 1BBE      		out 0x3b,__zero_reg__
 112:clksys_driver.c **** #endif
 113:clksys_driver.c **** 	asm volatile(
  44               		.loc 1 113 0
  45               	/* #APP */
  46               	 ;  113 "clksys_driver.c" 1
  47 0014 FC01      		movw r30,  r24
  48 0016 08ED      		ldi  r16,  216
  49 0018 04BF      		out   52, r16
  50 001a 6083      		st     Z,  r22
  51               		
  52               	 ;  0 "" 2
 114:clksys_driver.c **** 		"movw r30,  %0"	      "\n\t"
 115:clksys_driver.c **** 		"ldi  r16,  %2"	      "\n\t"
 116:clksys_driver.c **** 		"out   %3, r16"	      "\n\t"
 117:clksys_driver.c **** 		"st     Z,  %1"       "\n\t"
 118:clksys_driver.c **** 		:
 119:clksys_driver.c **** 		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
 120:clksys_driver.c **** 		: "r16", "r30", "r31"
 121:clksys_driver.c **** 		);
 122:clksys_driver.c **** 
 123:clksys_driver.c **** 	AVR_LEAVE_CRITICAL_REGION( );
  53               		.loc 1 123 0
  54               	/* #NOAPP */
  55 001c 8981      		ldd r24,Y+1
  56               	.LVL3:
  57 001e 8FBF      		out __SREG__,r24
  58               	/* epilogue start */
 124:clksys_driver.c **** #endif
 125:clksys_driver.c **** }
  59               		.loc 1 125 0
  60 0020 0F90      		pop __tmp_reg__
  61 0022 DF91      		pop r29
  62 0024 CF91      		pop r28
  63 0026 0F91      		pop r16
  64 0028 0895      		ret
  65               	.LFE7:
  67               	.global	CLKSYS_XOSC_Config
  69               	CLKSYS_XOSC_Config:
  70               	.LFB8:
 126:clksys_driver.c **** 
 127:clksys_driver.c **** /*! \brief This function configures the external oscillator.
 128:clksys_driver.c ****  *
 129:clksys_driver.c ****  *  \note Note that the oscillator cannot be used as a main system clock
 130:clksys_driver.c ****  *        source without being enabled and stable first. Check the ready flag
 131:clksys_driver.c ****  *        before using the clock. The macro CLKSYS_IsReady( _oscSel )
 132:clksys_driver.c ****  *        can be used to check this.
 133:clksys_driver.c ****  *
 134:clksys_driver.c ****  *  \param  freqRange          Frequency range for high-frequency crystal, does
 135:clksys_driver.c ****  *                             not apply for external clock or 32kHz crystals.
 136:clksys_driver.c ****  *  \param  lowPower32kHz      True of high-quality watch crystals are used and
 137:clksys_driver.c ****  *                             low-power oscillator is desired.
 138:clksys_driver.c ****  *  \param  xoscModeSelection  Combined selection of oscillator type (or
 139:clksys_driver.c ****  *                             external clock) and startup times.
 140:clksys_driver.c ****  */
 141:clksys_driver.c **** void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
 142:clksys_driver.c ****                          bool lowPower32kHz,
 143:clksys_driver.c ****                          OSC_XOSCSEL_t xoscModeSelection )
 144:clksys_driver.c **** {
  71               		.loc 1 144 0
  72               	.LVL4:
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
 145:clksys_driver.c **** 	OSC.XOSCCTRL = (uint8_t) freqRange |
  77               		.loc 1 145 0
  78 002a 6623      		tst r22
  79 002c 01F0      		breq .L4
  80 002e 90E2      		ldi r25,lo8(32)
  81 0030 00C0      		rjmp .L3
  82               	.L4:
  83 0032 90E0      		ldi r25,0
  84               	.L3:
  85               		.loc 1 145 0 is_stmt 0 discriminator 3
  86 0034 842B      		or r24,r20
  87               	.LVL5:
  88 0036 892B      		or r24,r25
  89 0038 8093 5200 		sts 82,r24
  90 003c 0895      		ret
  91               	.LFE8:
  93               	.global	CLKSYS_PLL_Config
  95               	CLKSYS_PLL_Config:
  96               	.LFB9:
 146:clksys_driver.c **** 	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
 147:clksys_driver.c **** 	               xoscModeSelection;
 148:clksys_driver.c **** }
 149:clksys_driver.c **** 
 150:clksys_driver.c **** 
 151:clksys_driver.c **** /*! \brief This function configures the internal high-frequency PLL.
 152:clksys_driver.c ****  *
 153:clksys_driver.c ****  *  Configuration of the internal high-frequency PLL to the correct
 154:clksys_driver.c ****  *  values. It is used to define the input of the PLL and the factor of
 155:clksys_driver.c ****  *  multiplication of the input clock source.
 156:clksys_driver.c ****  *
 157:clksys_driver.c ****  *  \note Note that the oscillator cannot be used as a main system clock
 158:clksys_driver.c ****  *        source without being enabled and stable first. Check the ready flag
 159:clksys_driver.c ****  *        before using the clock. The macro CLKSYS_IsReady( _oscSel )
 160:clksys_driver.c ****  *        can be used to check this.
 161:clksys_driver.c ****  *
 162:clksys_driver.c ****  *  \param  clockSource Reference clock source for the PLL,
 163:clksys_driver.c ****  *                      must be above 0.4MHz.
 164:clksys_driver.c ****  *  \param  factor      PLL multiplication factor, must be
 165:clksys_driver.c ****  *                      from 1 to 31, inclusive.
 166:clksys_driver.c ****  */
 167:clksys_driver.c **** void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
 168:clksys_driver.c **** {
  97               		.loc 1 168 0 is_stmt 1
  98               	.LVL6:
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
 169:clksys_driver.c **** 	factor &= OSC_PLLFAC_gm;
 103               		.loc 1 169 0
 104 003e 6F71      		andi r22,lo8(31)
 105               	.LVL7:
 170:clksys_driver.c **** 	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
 106               		.loc 1 170 0
 107 0040 682B      		or r22,r24
 108               	.LVL8:
 109 0042 E0E5      		ldi r30,lo8(80)
 110 0044 F0E0      		ldi r31,0
 111 0046 6583      		std Z+5,r22
 112 0048 0895      		ret
 113               	.LFE9:
 115               	.global	CLKSYS_Disable
 117               	CLKSYS_Disable:
 118               	.LFB10:
 171:clksys_driver.c **** }
 172:clksys_driver.c **** 
 173:clksys_driver.c **** 
 174:clksys_driver.c **** /*! \brief This function disables the selected oscillator.
 175:clksys_driver.c ****  *
 176:clksys_driver.c ****  *  This function will disable the selected oscillator if possible.
 177:clksys_driver.c ****  *  If it is currently used as a main system clock source, hardware will
 178:clksys_driver.c ****  *  disregard the disable attempt, and this function will return zero.
 179:clksys_driver.c ****  *  If it fails, change to another main system clock source and try again.
 180:clksys_driver.c ****  *
 181:clksys_driver.c ****  *  \param oscSel  Bitmask of selected clock. Can be one of the following
 182:clksys_driver.c ****  *                 OSC_RC2MEN_bm, OSC_RC32MEN_bm, OSC_RC32KEN_bm,
 183:clksys_driver.c ****  *                 OSC_XOSCEN_bm, OSC_PLLEN_bm.
 184:clksys_driver.c ****  *
 185:clksys_driver.c ****  *  \return  Non-zero if oscillator was disabled successfully.
 186:clksys_driver.c ****  */
 187:clksys_driver.c **** uint8_t CLKSYS_Disable( uint8_t oscSel )
 188:clksys_driver.c **** {
 119               		.loc 1 188 0
 120               	.LVL9:
 121               	/* prologue: function */
 122               	/* frame size = 0 */
 123               	/* stack size = 0 */
 124               	.L__stack_usage = 0
 189:clksys_driver.c **** 	OSC.CTRL &= ~oscSel;
 125               		.loc 1 189 0
 126 004a E0E5      		ldi r30,lo8(80)
 127 004c F0E0      		ldi r31,0
 128 004e 2081      		ld r18,Z
 129 0050 982F      		mov r25,r24
 130 0052 9095      		com r25
 131 0054 9223      		and r25,r18
 132 0056 9083      		st Z,r25
 190:clksys_driver.c **** 	uint8_t clkEnabled = OSC.CTRL & oscSel;
 133               		.loc 1 190 0
 134 0058 9081      		ld r25,Z
 135               	.LVL10:
 191:clksys_driver.c **** 	return clkEnabled;
 192:clksys_driver.c **** }
 136               		.loc 1 192 0
 137 005a 8923      		and r24,r25
 138               	.LVL11:
 139 005c 0895      		ret
 140               	.LFE10:
 142               	.global	CLKSYS_Prescalers_Config
 144               	CLKSYS_Prescalers_Config:
 145               	.LFB11:
 193:clksys_driver.c **** 
 194:clksys_driver.c **** 
 195:clksys_driver.c **** /*! \brief This function changes the prescaler configuration.
 196:clksys_driver.c ****  *
 197:clksys_driver.c ****  *  Change the configuration of the three system clock
 198:clksys_driver.c ****  *  prescaler is one single operation. The user must make sure that
 199:clksys_driver.c ****  *  the main CPU clock does not exceed recommended limits.
 200:clksys_driver.c ****  *
 201:clksys_driver.c ****  *  \param  PSAfactor   Prescaler A division factor, OFF or 2 to 512 in
 202:clksys_driver.c ****  *                      powers of two.
 203:clksys_driver.c ****  *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 204:clksys_driver.c ****  *                      of (1,1), (1,2), (4,1) or (2,2).
 205:clksys_driver.c ****  */
 206:clksys_driver.c **** void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
 207:clksys_driver.c ****                                CLK_PSBCDIV_t PSBCfactor )
 208:clksys_driver.c **** {
 146               		.loc 1 208 0
 147               	.LVL12:
 148               	/* prologue: function */
 149               	/* frame size = 0 */
 150               	/* stack size = 0 */
 151               	.L__stack_usage = 0
 209:clksys_driver.c **** 	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
 152               		.loc 1 209 0
 153 005e 682B      		or r22,r24
 154               	.LVL13:
 210:clksys_driver.c **** 	CCPWrite( &CLK.PSCTRL, PSconfig );
 155               		.loc 1 210 0
 156 0060 81E4      		ldi r24,lo8(65)
 157 0062 90E0      		ldi r25,0
 158               	.LVL14:
 159 0064 0C94 0000 		jmp CCPWrite
 160               	.LVL15:
 161               	.LFE11:
 163               	.global	CLKSYS_Main_ClockSource_Select
 165               	CLKSYS_Main_ClockSource_Select:
 166               	.LFB12:
 211:clksys_driver.c **** }
 212:clksys_driver.c **** 
 213:clksys_driver.c **** 
 214:clksys_driver.c **** /*! \brief This function selects the main system clock source.
 215:clksys_driver.c ****  *
 216:clksys_driver.c ****  *  Hardware will disregard any attempts to select a clock source that is not
 217:clksys_driver.c ****  *  enabled or not stable. If the change fails, make sure the source is ready
 218:clksys_driver.c ****  *  and running and try again.
 219:clksys_driver.c ****  *
 220:clksys_driver.c ****  *  \param  clockSource  Clock source to use as input for the system clock
 221:clksys_driver.c ****  *                       prescaler block.
 222:clksys_driver.c ****  *
 223:clksys_driver.c ****  *  \return  Non-zero if change was successful.
 224:clksys_driver.c ****  */
 225:clksys_driver.c **** uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
 226:clksys_driver.c **** {
 167               		.loc 1 226 0
 168               	.LVL16:
 169 0068 1F93      		push r17
 170               	.LCFI5:
 171 006a CF93      		push r28
 172               	.LCFI6:
 173 006c DF93      		push r29
 174               	.LCFI7:
 175               	/* prologue: function */
 176               	/* frame size = 0 */
 177               	/* stack size = 3 */
 178               	.L__stack_usage = 3
 179 006e 182F      		mov r17,r24
 227:clksys_driver.c **** 	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
 180               		.loc 1 227 0
 181 0070 C0E4      		ldi r28,lo8(64)
 182 0072 D0E0      		ldi r29,0
 183 0074 6881      		ld r22,Y
 184               	.LVL17:
 185 0076 687F      		andi r22,lo8(-8)
 186               	.LVL18:
 187 0078 682B      		or r22,r24
 188               	.LVL19:
 228:clksys_driver.c **** 	CCPWrite( &CLK.CTRL, clkCtrl );
 189               		.loc 1 228 0
 190 007a 80E4      		ldi r24,lo8(64)
 191 007c 90E0      		ldi r25,0
 192               	.LVL20:
 193 007e 0E94 0000 		call CCPWrite
 194               	.LVL21:
 229:clksys_driver.c **** 	clkCtrl = ( CLK.CTRL & clockSource );
 195               		.loc 1 229 0
 196 0082 8881      		ld r24,Y
 197               	.LVL22:
 230:clksys_driver.c **** 	return clkCtrl;
 231:clksys_driver.c **** }
 198               		.loc 1 231 0
 199 0084 8123      		and r24,r17
 200               	.LVL23:
 201               	/* epilogue start */
 202 0086 DF91      		pop r29
 203 0088 CF91      		pop r28
 204 008a 1F91      		pop r17
 205               	.LVL24:
 206 008c 0895      		ret
 207               	.LFE12:
 209               	.global	CLKSYS_RTC_ClockSource_Enable
 211               	CLKSYS_RTC_ClockSource_Enable:
 212               	.LFB13:
 232:clksys_driver.c **** 
 233:clksys_driver.c **** 
 234:clksys_driver.c **** /*! \brief This function selects a Real-Time Counter clock source.
 235:clksys_driver.c ****  *
 236:clksys_driver.c ****  *  Selects the clock source for use by the Real-Time Counter (RTC)
 237:clksys_driver.c ****  *  and enables clock signal routing to the RTC module.
 238:clksys_driver.c ****  *
 239:clksys_driver.c ****  *  \param  clockSource  Clock source to use for the RTC.
 240:clksys_driver.c ****  */
 241:clksys_driver.c **** void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
 242:clksys_driver.c **** {
 213               		.loc 1 242 0
 214               	.LVL25:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 243:clksys_driver.c **** 	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
 219               		.loc 1 243 0
 220 008e E0E4      		ldi r30,lo8(64)
 221 0090 F0E0      		ldi r31,0
 222 0092 9381      		ldd r25,Z+3
 223 0094 917F      		andi r25,lo8(-15)
 224 0096 9160      		ori r25,lo8(1)
 225 0098 982B      		or r25,r24
 226 009a 9383      		std Z+3,r25
 227 009c 0895      		ret
 228               	.LFE13:
 230               	.global	CLKSYS_AutoCalibration_Enable
 232               	CLKSYS_AutoCalibration_Enable:
 233               	.LFB14:
 244:clksys_driver.c **** 	              clockSource |
 245:clksys_driver.c **** 	              CLK_RTCEN_bm;
 246:clksys_driver.c **** }
 247:clksys_driver.c **** 
 248:clksys_driver.c **** 
 249:clksys_driver.c **** /*! \brief This function enables automatic calibration of the selected internal
 250:clksys_driver.c ****  *         oscillator.
 251:clksys_driver.c ****  *
 252:clksys_driver.c ****  *  Either the internal 32kHz RC oscillator or an external 32kHz
 253:clksys_driver.c ****  *  crystal can be used as a calibration reference. The user must make sure
 254:clksys_driver.c ****  *  that the selected reference is ready and running.
 255:clksys_driver.c ****  *
 256:clksys_driver.c ****  *  \param  clkSource    Clock source to calibrate, either OSC_RC2MCREF_bm or
 257:clksys_driver.c ****  *                       OSC_RC32MCREF_bm.
 258:clksys_driver.c ****  *  \param  extReference True if external crystal should be used as reference.
 259:clksys_driver.c ****  */
 260:clksys_driver.c **** void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
 261:clksys_driver.c **** {
 234               		.loc 1 261 0
 235               	.LVL26:
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 0 */
 239               	.L__stack_usage = 0
 262:clksys_driver.c **** 	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
 240               		.loc 1 262 0
 241 009e 3091 5600 		lds r19,86
 242 00a2 282F      		mov r18,r24
 243 00a4 982F      		mov r25,r24
 244 00a6 9095      		com r25
 245 00a8 9323      		and r25,r19
 246 00aa 6111      		cpse r22,__zero_reg__
 247 00ac 00C0      		rjmp .L11
 248 00ae 20E0      		ldi r18,0
 249               	.L11:
 250               		.loc 1 262 0 is_stmt 0 discriminator 3
 251 00b0 922B      		or r25,r18
 252 00b2 9093 5600 		sts 86,r25
 263:clksys_driver.c **** 	               ( extReference ? clkSource : 0 );
 264:clksys_driver.c **** 	if (clkSource == OSC_RC2MCREF_bm) {
 253               		.loc 1 264 0 is_stmt 1 discriminator 3
 254 00b6 8130      		cpi r24,lo8(1)
 255 00b8 01F4      		brne .L12
 265:clksys_driver.c **** 		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
 256               		.loc 1 265 0
 257 00ba 8091 6800 		lds r24,104
 258               	.LVL27:
 259 00be 8160      		ori r24,lo8(1)
 260 00c0 8093 6800 		sts 104,r24
 261 00c4 0895      		ret
 262               	.LVL28:
 263               	.L12:
 266:clksys_driver.c **** 	} else if (clkSource == OSC_RC32MCREF_bm) {
 264               		.loc 1 266 0
 265 00c6 8230      		cpi r24,lo8(2)
 266 00c8 01F4      		brne .L10
 267:clksys_driver.c **** 		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
 267               		.loc 1 267 0
 268 00ca 8091 6000 		lds r24,96
 269               	.LVL29:
 270 00ce 8160      		ori r24,lo8(1)
 271 00d0 8093 6000 		sts 96,r24
 272               	.L10:
 273 00d4 0895      		ret
 274               	.LFE14:
 276               	.global	CLKSYS_XOSC_FailureDetection_Enable
 278               	CLKSYS_XOSC_FailureDetection_Enable:
 279               	.LFB15:
 268:clksys_driver.c **** 	}
 269:clksys_driver.c **** }
 270:clksys_driver.c **** 
 271:clksys_driver.c **** 
 272:clksys_driver.c **** /*! \brief This function enables the External Oscillator Failure Detection
 273:clksys_driver.c ****  *         (XOSCFD) feature.
 274:clksys_driver.c ****  *
 275:clksys_driver.c ****  *  The feature will stay enabled until next reset. Note that the
 276:clksys_driver.c ****  *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 277:clksys_driver.c ****  *  any interrupt priorities and settings. Therefore, make sure that a handler
 278:clksys_driver.c ****  *  is implemented for the XOSCF NMI when you enable it.
 279:clksys_driver.c ****  */
 280:clksys_driver.c **** void CLKSYS_XOSC_FailureDetection_Enable( void )
 281:clksys_driver.c **** {
 280               		.loc 1 281 0
 281               	/* prologue: function */
 282               	/* frame size = 0 */
 283               	/* stack size = 0 */
 284               	.L__stack_usage = 0
 282:clksys_driver.c **** 	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
 285               		.loc 1 282 0
 286 00d6 63E0      		ldi r22,lo8(3)
 287 00d8 83E5      		ldi r24,lo8(83)
 288 00da 90E0      		ldi r25,0
 289 00dc 0C94 0000 		jmp CCPWrite
 290               	.LVL30:
 291               	.LFE15:
 293               	.global	CLKSYS_Configuration_Lock
 295               	CLKSYS_Configuration_Lock:
 296               	.LFB16:
 283:clksys_driver.c **** }
 284:clksys_driver.c **** 
 285:clksys_driver.c **** 
 286:clksys_driver.c **** /*! \brief This function lock the entire clock system configuration.
 287:clksys_driver.c ****  *
 288:clksys_driver.c ****  *  This will lock the configuration until the next reset, or until the
 289:clksys_driver.c ****  *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 290:clksys_driver.c ****  *  and switches to internal 2MHz RC oscillator.
 291:clksys_driver.c ****  */
 292:clksys_driver.c **** void CLKSYS_Configuration_Lock( void )
 293:clksys_driver.c **** {
 297               		.loc 1 293 0
 298               	/* prologue: function */
 299               	/* frame size = 0 */
 300               	/* stack size = 0 */
 301               	.L__stack_usage = 0
 294:clksys_driver.c **** 	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
 302               		.loc 1 294 0
 303 00e0 61E0      		ldi r22,lo8(1)
 304 00e2 82E4      		ldi r24,lo8(66)
 305 00e4 90E0      		ldi r25,0
 306 00e6 0C94 0000 		jmp CCPWrite
 307               	.LVL31:
 308               	.LFE16:
 452               	.Letext0:
 453               		.file 2 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/stdint.h"
 454               		.file 3 "/usr/lib/gcc/avr/4.7.0/../../../avr/include/avr/iox32a4.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 clksys_driver.c
     /tmp/cckG73Gd.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cckG73Gd.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cckG73Gd.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cckG73Gd.s:5      *ABS*:0000000000000034 __CCP__
     /tmp/cckG73Gd.s:6      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cckG73Gd.s:7      *ABS*:0000000000000001 __zero_reg__
     /tmp/cckG73Gd.s:12     .text:0000000000000000 CCPWrite
     /tmp/cckG73Gd.s:69     .text:000000000000002a CLKSYS_XOSC_Config
     /tmp/cckG73Gd.s:95     .text:000000000000003e CLKSYS_PLL_Config
     /tmp/cckG73Gd.s:117    .text:000000000000004a CLKSYS_Disable
     /tmp/cckG73Gd.s:144    .text:000000000000005e CLKSYS_Prescalers_Config
     /tmp/cckG73Gd.s:165    .text:0000000000000068 CLKSYS_Main_ClockSource_Select
     /tmp/cckG73Gd.s:211    .text:000000000000008e CLKSYS_RTC_ClockSource_Enable
     /tmp/cckG73Gd.s:232    .text:000000000000009e CLKSYS_AutoCalibration_Enable
     /tmp/cckG73Gd.s:278    .text:00000000000000d6 CLKSYS_XOSC_FailureDetection_Enable
     /tmp/cckG73Gd.s:295    .text:00000000000000e0 CLKSYS_Configuration_Lock

NO UNDEFINED SYMBOLS
